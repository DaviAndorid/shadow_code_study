apply plugin: 'com.android.application'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.example.demohot"

        //系统的 API 级别低于该属性中指定的值，Android 系统将阻止用户安装应用
        minSdkVersion 16

        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    //https://github.com/mapbox/mapbox-gl-native/issues/11378
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/sample-manager/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/sample-manager/release/')
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(':constant')
    implementation project(':dynamic-host')
    implementation 'commons-io:commons-io:2.5'
}

//把 制定模块的apk（如：sample-manager ）拷贝到 本工程的 build/generated/assets/xx/
def createCopyTask(projectName, buildType, name, apkName, inputFile, taskName) {
    println "daviAndroid createCopyTask"

    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()

    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn("${projectName}:${taskName}")
}

/***
 * 1)generateAssetsTask, 系统task的锚点
 * 2)buildType，debug/release
 * */
def generateAssets(generateAssetsTask, buildType) {
    println "daviAndroid generateAssets"

    def moduleName = 'sample-manager'
    def pluginManagerApkFile = file("${project(":sample-manager").getBuildDir()}" + "/outputs/apk/${buildType}/"
            + "${moduleName}-${buildType}.apk")
    //createCopyTask 挂在在  《generateAssetsTask, 系统task的锚点》的前面
    generateAssetsTask.dependsOn createCopyTask(
            ':sample-manager',
            buildType,
            moduleName,
            'pluginmanager.apk',
            pluginManagerApkFile,
            "assemble${buildType.capitalize()}"
    )
}

/**
 *
 * 【主要 Task 分析】https://segmentfault.com/a/1190000020207488
 *
 * ..........
 *
 * compileDebugShaders                  编译 shaders
 *
 * generateDebugAssets                  空 task，锚点
 *
 * mergeDebugAssets                     合并 assets 文件
 *
 * .........
 *
 *
 *
 * */
tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        generateAssets(task, 'debug')
    }
    if (task.name == "generateReleaseAssets") {
        generateAssets(task, 'release')
    }
}



